source('~/GitHub/CERC-BEE-Benchmarking-Tool/Archive/Single_Building/20180406/Report/map.r')
install.packages("maps")
source('~/GitHub/CERC-BEE-Benchmarking-Tool/Archive/Single_Building/20180406/Report/map.r')
install.packages('e1071')
?svm
??svm
df <- data.frame(a = c(1,6000,20),
b = c(NA, 2130, 5001))
df
df[,2][which(df[,2]>50000)] <- NA
df <- data.frame(a = c(1,6000,20),
b = c(NA, 2130, 50001))
df
df[,2][which(df[,2]>50000)] <- NA
df
df <- data.frame(a = c(1,50001,20),
b = c(NA, 2130, 50001))
df
df[,2][which(df[,2]>50000)] <- NA
df
df <- data.frame(a = c(1,50001,20),
b = c(NA, 2130, 50001))
df[,2][which(df[,2]>50000)] <- NA
df <- data.frame(a = c(1,50001,20),
b = c(NA, 2130, 50001))
df[,2][which(df[,2]>50000)] <- NA
df <- data.frame(a = c(1,50001,20),
b = c(NA, 2130, 50001))
df
source('C:/Users/Han/Dropbox (Energy Technologies)/Projects/CERC-BEE  Benchmarking Tool/Presentations/Materials/plots.r')
p_empty
p_good
? ggplot
?stat_function
p_all
# Generate charts for the assessment module
p_assess <- ggplot(data.frame(x = c(-5, 5)), aes(x)) +
stat_function(fun = dnorm, size = 1) +
stat_function(fun = dnorm,
xlim = c(1,5),
geom = "area",
fill = "#FA8072",
alpha = 0.9) +
stat_function(fun = dnorm,
xlim = c(-1,1),
geom = "area",
fill = "#87CEFA",
alpha = 0.9) +
stat_function(fun = dnorm,
xlim = c(-5,-1),
geom = "area",
fill = "#90EE90",
alpha = 0.9) +
scale_x_continuous(name = "Standard Deviation",
breaks = seq(-3, 3, 0.5),
limits=c(-3.5, 3.5)) +
scale_y_continuous(expand = c(0, 0.005),
limits = c(0, 0.45)) +
geom_text(x = 1.5, y = 0.43, size = 4.5, fontface = "bold", label = paste0("Poor")) +
geom_text(x = 0, y = 0.43, size = 4.5, fontface = "bold", label = paste0("Typical")) +
geom_text(x = -1.5, y = 0.43, size = 4.5, fontface = "bold", label = paste0("Good")) +
geom_vline(xintercept = -1, colour = "black", linetype = "dashed") +
geom_vline(xintercept = 1, colour = "black", linetype = "dashed") +
theme_bw() +
theme(axis.line.x = element_line(size = 0.8, colour = "black"),
axis.line.y =  element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
p_assess
# Generate charts for the assessment module
p_assess <- ggplot(data.frame(x = c(-5, 5)), aes(x)) +
stat_function(fun = dnorm, size = 1) +
stat_function(fun = dnorm,
xlim = c(1,5),
geom = "area",
fill = "#FA8072",
alpha = 0.6) +
stat_function(fun = dnorm,
xlim = c(-1,1),
geom = "area",
fill = "#87CEFA",
alpha = 0.6) +
stat_function(fun = dnorm,
xlim = c(-5,-1),
geom = "area",
fill = "#90EE90",
alpha = 0.6) +
scale_x_continuous(name = "Standard Deviation",
breaks = seq(-3, 3, 0.5),
limits=c(-3.5, 3.5)) +
scale_y_continuous(expand = c(0, 0.005),
limits = c(0, 0.45)) +
geom_text(x = 1.5, y = 0.43, size = 4.5, fontface = "bold", label = paste0("Poor")) +
geom_text(x = 0, y = 0.43, size = 4.5, fontface = "bold", label = paste0("Typical")) +
geom_text(x = -1.5, y = 0.43, size = 4.5, fontface = "bold", label = paste0("Good")) +
geom_vline(xintercept = -1, colour = "black", linetype = "dashed") +
geom_vline(xintercept = 1, colour = "black", linetype = "dashed") +
theme_bw() +
theme(axis.line.x = element_line(size = 0.8, colour = "black"),
axis.line.y =  element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
p_assess
# Generate charts for the assessment module
p_assess <- ggplot(data.frame(x = c(-5, 5)), aes(x)) +
stat_function(fun = dnorm, size = 1) +
stat_function(fun = dnorm,
xlim = c(1,5),
geom = "area",
fill = "#FA8072",
alpha = 0.3) +
stat_function(fun = dnorm,
xlim = c(-1,1),
geom = "area",
fill = "#87CEFA",
alpha = 0.3) +
stat_function(fun = dnorm,
xlim = c(-5,-1),
geom = "area",
fill = "#90EE90",
alpha = 0.3) +
scale_x_continuous(name = "Standard Deviation",
breaks = seq(-3, 3, 0.5),
limits=c(-3.5, 3.5)) +
scale_y_continuous(expand = c(0, 0.005),
limits = c(0, 0.45)) +
geom_text(x = 1.5, y = 0.43, size = 4.5, fontface = "bold", label = paste0("Poor")) +
geom_text(x = 0, y = 0.43, size = 4.5, fontface = "bold", label = paste0("Typical")) +
geom_text(x = -1.5, y = 0.43, size = 4.5, fontface = "bold", label = paste0("Good")) +
geom_vline(xintercept = -1, colour = "black", linetype = "dashed") +
geom_vline(xintercept = 1, colour = "black", linetype = "dashed") +
theme_bw() +
theme(axis.line.x = element_line(size = 0.8, colour = "black"),
axis.line.y =  element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
p_assess
# Generate charts for the assessment module
p_assess <- ggplot(data.frame(x = c(-5, 5)), aes(x)) +
stat_function(fun = dnorm, size = 1) +
stat_function(fun = dnorm,
xlim = c(1,5),
geom = "area",
fill = "#FA8072",
alpha = 0.3) +
stat_function(fun = dnorm,
xlim = c(-1,1),
geom = "area",
fill = "#87CEFA",
alpha = 0.3) +
stat_function(fun = dnorm,
xlim = c(-5,-1),
geom = "area",
fill = "#90EE90",
alpha = 0.3) +
scale_x_continuous(name = "Standard Deviation",
breaks = seq(-3, 3, 0.5),
limits=c(-3.5, 3.5)) +
scale_y_continuous(expand = c(0, 0.005),
limits = c(0, 0.45)) +
geom_text(x = 1.5, y = 0.43, size = 4.5, fontface = "bold", label = paste0("Poor")) +
geom_text(x = 0, y = 0.43, size = 4.5, fontface = "bold", label = paste0("Typical")) +
geom_text(x = -1.5, y = 0.43, size = 4.5, fontface = "bold", label = paste0("Good")) +
geom_text(x = -1.5, y = 0.43, size = 4.5, fontface = "bold", label = paste0("Good")) +
geom_vline(xintercept = -1, colour = "black", linetype = "dashed") +
geom_vline(xintercept = 0.5, colour = "black", linetype = "dashed") +
geom_vline(xintercept = 0, colour = "black", linetype = "dashed") +
theme_bw() +
theme(axis.line.x = element_line(size = 0.8, colour = "black"),
axis.line.y =  element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
p_assess
# Generate charts for the assessment module
p_assess <- ggplot(data.frame(x = c(-5, 5)), aes(x)) +
stat_function(fun = dnorm, size = 1) +
stat_function(fun = dnorm,
xlim = c(1,5),
geom = "area",
fill = "#FA8072",
alpha = 0.3) +
stat_function(fun = dnorm,
xlim = c(-1,1),
geom = "area",
fill = "#87CEFA",
alpha = 0.3) +
stat_function(fun = dnorm,
xlim = c(-5,-1),
geom = "area",
fill = "#90EE90",
alpha = 0.3) +
scale_x_continuous(name = "Standard Deviation",
breaks = seq(-3, 3, 0.5),
limits=c(-3.5, 3.5)) +
scale_y_continuous(expand = c(0, 0.005),
limits = c(0, 0.45)) +
theme_bw() +
theme(axis.line.x = element_line(size = 0.8, colour = "black"),
axis.line.y =  element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
p_assess
# Generate charts for the assessment module
p_assess <- ggplot(data.frame(x = c(-5, 5)), aes(x)) +
stat_function(fun = dnorm, size = 1) +
stat_function(fun = dnorm,
xlim = c(1,5),
geom = "area",
fill = "#FA8072",
alpha = 0.4) +
stat_function(fun = dnorm,
xlim = c(-1,1),
geom = "area",
fill = "#87CEFA",
alpha = 0.4) +
stat_function(fun = dnorm,
xlim = c(-5,-1),
geom = "area",
fill = "#90EE90",
alpha = 0.4) +
scale_x_continuous(name = "Standard Deviation",
breaks = seq(-3, 3, 0.5),
limits=c(-3.5, 3.5)) +
scale_y_continuous(expand = c(0, 0.005),
limits = c(0, 0.45)) +
theme_bw() +
theme(axis.line.x = element_line(size = 0.8, colour = "black"),
axis.line.y =  element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
p_assess
# Generate charts for the assessment module
p_assess <- ggplot(data.frame(x = c(-5, 5)), aes(x)) +
stat_function(fun = dnorm, size = 1, alpha = 0.4) +
stat_function(fun = dnorm,
xlim = c(1,5),
geom = "area",
fill = "#FA8072",
alpha = 0.4) +
stat_function(fun = dnorm,
xlim = c(-1,1),
geom = "area",
fill = "#87CEFA",
alpha = 0.4) +
stat_function(fun = dnorm,
xlim = c(-5,-1),
geom = "area",
fill = "#90EE90",
alpha = 0.4) +
scale_x_continuous(name = "Standard Deviation",
breaks = seq(-3, 3, 0.5),
limits=c(-3.5, 3.5)) +
scale_y_continuous(expand = c(0, 0.005),
limits = c(0, 0.45)) +
theme_bw() +
theme(axis.line.x = element_line(size = 0.8, colour = "black"),
axis.line.y =  element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
p_assess
# Generate charts for the assessment module
p_assess <- ggplot(data.frame(x = c(-5, 5)), aes(x)) +
stat_function(fun = dnorm, size = 1, alpha = 0.6) +
stat_function(fun = dnorm,
xlim = c(1,5),
geom = "area",
fill = "#FA8072",
alpha = 0.5) +
stat_function(fun = dnorm,
xlim = c(-1,1),
geom = "area",
fill = "#87CEFA",
alpha = 0.5) +
stat_function(fun = dnorm,
xlim = c(-5,-1),
geom = "area",
fill = "#90EE90",
alpha = 0.5) +
scale_x_continuous(name = "Standard Deviation",
breaks = seq(-3, 3, 0.5),
limits=c(-3.5, 3.5)) +
scale_y_continuous(expand = c(0, 0.005),
limits = c(0, 0.45)) +
theme_bw() +
theme(axis.line.x = element_line(size = 0.8, colour = "black"),
axis.line.y =  element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
p_assess
index_s <- 1
index_e <- 52560
t = seq(index_s, index_e, 1)
t
summary(t)
index_s <- 1
index_e <- 52
t = seq(index_s, index_e, 1)
y = sin(pi/(index_e-index_s)*(t - index_s))
plot(t,y,type="l", xlab="time", ylab="Sine wave")
y
y = sin(2*pi/(index_e-index_s)*(t - index_s))
plot(t,y,type="l", xlab="time", ylab="Sine wave")
index_s <- 1
index_e <- 8760
t = seq(index_s, index_e, 1)
y = sin(2*pi/(index_e-index_s)*(t - index_s))
plot(t,y,type="l", xlab="time", ylab="Sine wave")
y = sin(2*pi/(index_e-index_s)*(t - index_s)) + 353.4
plot(t,y,type="l", xlab="time", ylab="Sine wave")
plot(t,y,type="l", xlab="time", ylab="Sine wave")
noise <- rnorm(sum(corrupt),1000,200) # generate the noise to add
runif(1, 5.0, 7.5)
runif(1, 5.0, 7.5)
runif(1, 5.0, 7.5)
rep(runif(1, 5.0, 7.5), 20)
rep(runif(2, 5.0, 7.5), 20)
?runif
sample(1:100, 3, replace=FALSE)
?sample
sample(1:10, 10, replace = True)
sample(1:10, 10, replace = True)
sample(1:10, 10, replace = TRUE)
sample(1:10, 10, replace = F)
sample(1:10, 11, replace = F)
sample(-5:5, (index_e - index_s + 1), replace = TRUE)
index_s <- 1
index_e <- 8760
t = seq(index_s, index_e, 1)
base = sin(2*pi/(index_e-index_s)*(t - index_s)) + 353.4
noise <- sample(-5:5, (index_e - index_s + 1), replace = TRUE)
y <- base + noise
plot(t,y,type="l", xlab="time", ylab="Sine wave")
plot(t,base,type="l", xlab="time", ylab="Sine wave")
index_s <- 1
index_e <- 8760
t = seq(index_s, index_e, 1)
base = 1.5 * sin(2*pi/(index_e-index_s)*(t - index_s)) + 353.4
noise <- sample(-5:5, (index_e - index_s + 1), replace = TRUE)
y <- base + noise
plot(t,y,type="l", xlab="time", ylab="Sine wave")
plot(t,base,type="l", xlab="time", ylab="Sine wave")
plot(t,y,type="l", xlab="time", ylab="Sine wave")
index_s <- 1
index_e <- 52560
t = seq(index_s, index_e, 1)
base = 1.5 * sin(2*pi/(index_e-index_s)*(t - index_s)) + 353.4
noise <- sample(-5:5, (index_e - index_s + 1), replace = TRUE)
y <- base + noise
df_d <- data.frame(CO2 <- y)
View(df_d)
write.csv(df_d, "Dummy_CO2.csv", row.names = F)
index_s <- 1
index_e <- 52560
t = seq(index_s, index_e, 1)
base = 1.5 * sin(2*pi/(index_e-index_s)*(t - index_s)) + 387.6
noise <- sample(-5:5, (index_e - index_s + 1), replace = TRUE)
y <- base + noise
plot(t,y,type="l", xlab="time", ylab="Sine wave")
plot(t,base,type="l", xlab="time", ylab="Sine wave")
df_d <- data.frame(CO2 <- y)
View(df_d)
write.csv(df_d, "Dummy_CO2.csv", row.names = F)
plot(t,y,type="l", xlab="time", ylab="Sine wave")
R
3+4
setwd("~/GitHub/SDI/Model_Calibration_2.1")
source('C:/Users/Han/Dropbox (Energy Technologies)/Projects/Sensor Data Integration/sub-task-2/timestep_visualization.r')
source('C:/Users/Han/Dropbox (Energy Technologies)/Projects/Sensor Data Integration/sub-task-2/timestep_visualization.r')
source('C:/Users/Han/Dropbox (Energy Technologies)/Projects/Sensor Data Integration/sub-task-2/timestep_visualization.r')
setwd("~/GitHub/CERC-BEE-Benchmarking-Tool/outputs/comparison")
source('~/GitHub/CERC-BEE-Benchmarking-Tool/outputs/comparison/get_FIM.r')
setwd("~/GitHub/SDI/Model_Calibration_2.1/1~Manual_Calibration")
source('C:/Users/Han/Dropbox (Energy Technologies)/Projects/Sensor Data Integration/sub-task-2/timestep_visualization.r')
source('C:/Users/Han/Dropbox (Energy Technologies)/Projects/Sensor Data Integration/sub-task-2/timestep_visualization.r')
