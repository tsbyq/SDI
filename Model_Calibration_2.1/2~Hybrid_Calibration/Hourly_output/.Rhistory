theme(axis.line.x = element_line(size = 0.8, colour = "black"),
axis.line.y =  element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
p_assess
# Generate charts for the assessment module
p_assess <- ggplot(data.frame(x = c(-5, 5)), aes(x)) +
stat_function(fun = dnorm, size = 1) +
stat_function(fun = dnorm,
xlim = c(1,5),
geom = "area",
fill = "#FA8072",
alpha = 0.4) +
stat_function(fun = dnorm,
xlim = c(-1,1),
geom = "area",
fill = "#87CEFA",
alpha = 0.4) +
stat_function(fun = dnorm,
xlim = c(-5,-1),
geom = "area",
fill = "#90EE90",
alpha = 0.4) +
scale_x_continuous(name = "Standard Deviation",
breaks = seq(-3, 3, 0.5),
limits=c(-3.5, 3.5)) +
scale_y_continuous(expand = c(0, 0.005),
limits = c(0, 0.45)) +
theme_bw() +
theme(axis.line.x = element_line(size = 0.8, colour = "black"),
axis.line.y =  element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
p_assess
# Generate charts for the assessment module
p_assess <- ggplot(data.frame(x = c(-5, 5)), aes(x)) +
stat_function(fun = dnorm, size = 1, alpha = 0.4) +
stat_function(fun = dnorm,
xlim = c(1,5),
geom = "area",
fill = "#FA8072",
alpha = 0.4) +
stat_function(fun = dnorm,
xlim = c(-1,1),
geom = "area",
fill = "#87CEFA",
alpha = 0.4) +
stat_function(fun = dnorm,
xlim = c(-5,-1),
geom = "area",
fill = "#90EE90",
alpha = 0.4) +
scale_x_continuous(name = "Standard Deviation",
breaks = seq(-3, 3, 0.5),
limits=c(-3.5, 3.5)) +
scale_y_continuous(expand = c(0, 0.005),
limits = c(0, 0.45)) +
theme_bw() +
theme(axis.line.x = element_line(size = 0.8, colour = "black"),
axis.line.y =  element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
p_assess
# Generate charts for the assessment module
p_assess <- ggplot(data.frame(x = c(-5, 5)), aes(x)) +
stat_function(fun = dnorm, size = 1, alpha = 0.6) +
stat_function(fun = dnorm,
xlim = c(1,5),
geom = "area",
fill = "#FA8072",
alpha = 0.5) +
stat_function(fun = dnorm,
xlim = c(-1,1),
geom = "area",
fill = "#87CEFA",
alpha = 0.5) +
stat_function(fun = dnorm,
xlim = c(-5,-1),
geom = "area",
fill = "#90EE90",
alpha = 0.5) +
scale_x_continuous(name = "Standard Deviation",
breaks = seq(-3, 3, 0.5),
limits=c(-3.5, 3.5)) +
scale_y_continuous(expand = c(0, 0.005),
limits = c(0, 0.45)) +
theme_bw() +
theme(axis.line.x = element_line(size = 0.8, colour = "black"),
axis.line.y =  element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
p_assess
index_s <- 1
index_e <- 52560
t = seq(index_s, index_e, 1)
t
summary(t)
index_s <- 1
index_e <- 52
t = seq(index_s, index_e, 1)
y = sin(pi/(index_e-index_s)*(t - index_s))
plot(t,y,type="l", xlab="time", ylab="Sine wave")
y
y = sin(2*pi/(index_e-index_s)*(t - index_s))
plot(t,y,type="l", xlab="time", ylab="Sine wave")
index_s <- 1
index_e <- 8760
t = seq(index_s, index_e, 1)
y = sin(2*pi/(index_e-index_s)*(t - index_s))
plot(t,y,type="l", xlab="time", ylab="Sine wave")
y = sin(2*pi/(index_e-index_s)*(t - index_s)) + 353.4
plot(t,y,type="l", xlab="time", ylab="Sine wave")
plot(t,y,type="l", xlab="time", ylab="Sine wave")
noise <- rnorm(sum(corrupt),1000,200) # generate the noise to add
runif(1, 5.0, 7.5)
runif(1, 5.0, 7.5)
runif(1, 5.0, 7.5)
rep(runif(1, 5.0, 7.5), 20)
rep(runif(2, 5.0, 7.5), 20)
?runif
sample(1:100, 3, replace=FALSE)
?sample
sample(1:10, 10, replace = True)
sample(1:10, 10, replace = True)
sample(1:10, 10, replace = TRUE)
sample(1:10, 10, replace = F)
sample(1:10, 11, replace = F)
sample(-5:5, (index_e - index_s + 1), replace = TRUE)
index_s <- 1
index_e <- 8760
t = seq(index_s, index_e, 1)
base = sin(2*pi/(index_e-index_s)*(t - index_s)) + 353.4
noise <- sample(-5:5, (index_e - index_s + 1), replace = TRUE)
y <- base + noise
plot(t,y,type="l", xlab="time", ylab="Sine wave")
plot(t,base,type="l", xlab="time", ylab="Sine wave")
index_s <- 1
index_e <- 8760
t = seq(index_s, index_e, 1)
base = 1.5 * sin(2*pi/(index_e-index_s)*(t - index_s)) + 353.4
noise <- sample(-5:5, (index_e - index_s + 1), replace = TRUE)
y <- base + noise
plot(t,y,type="l", xlab="time", ylab="Sine wave")
plot(t,base,type="l", xlab="time", ylab="Sine wave")
plot(t,y,type="l", xlab="time", ylab="Sine wave")
index_s <- 1
index_e <- 52560
t = seq(index_s, index_e, 1)
base = 1.5 * sin(2*pi/(index_e-index_s)*(t - index_s)) + 353.4
noise <- sample(-5:5, (index_e - index_s + 1), replace = TRUE)
y <- base + noise
df_d <- data.frame(CO2 <- y)
View(df_d)
write.csv(df_d, "Dummy_CO2.csv", row.names = F)
index_s <- 1
index_e <- 52560
t = seq(index_s, index_e, 1)
base = 1.5 * sin(2*pi/(index_e-index_s)*(t - index_s)) + 387.6
noise <- sample(-5:5, (index_e - index_s + 1), replace = TRUE)
y <- base + noise
plot(t,y,type="l", xlab="time", ylab="Sine wave")
plot(t,base,type="l", xlab="time", ylab="Sine wave")
df_d <- data.frame(CO2 <- y)
View(df_d)
write.csv(df_d, "Dummy_CO2.csv", row.names = F)
plot(t,y,type="l", xlab="time", ylab="Sine wave")
R
3+4
setwd("~/GitHub/SDI/Model_Calibration_2.1/2~Hybrid_Calibration/InverseModeling")
source('C:/Users/Han/Dropbox (Energy Technologies)/Projects/Sensor Data Integration/sub-task-2/timestep_visualization.r')
setwd("~/GitHub/SDI/Model_Calibration_2.1/2~Hybrid_Calibration/InverseModeling")
source('C:/Users/Han/Dropbox (Energy Technologies)/Projects/Sensor Data Integration/sub-task-2/timestep_visualization.r')
setwd("~/GitHub/SDI/Model_Calibration_2.1/2~Hybrid_Calibration")
source('C:/Users/Han/Dropbox (Energy Technologies)/Projects/Sensor Data Integration/sub-task-2/timestep_visualization.r')
source('C:/Users/Han/Dropbox (Energy Technologies)/Projects/Sensor Data Integration/sub-task-2/timestep_visualization.r')
setwd("~/GitHub/SDI/Model_Calibration_2.1/2~Hybrid_Calibration/Hourly_output")
library(readr)
library(plotly)
library(dplyr)
library(reshape2)
filename <- "hourly_conusmption.csv"
df <- read.csv(filename)
View(df)
df_melt <- df %>% melt
View(df_melt)
plot(df_melt)
setwd("C:/Users/Han/Dropbox (Energy Technologies)/Projects/Sensor Data Integration/sub-task-2/Experiments/All/plots")
library(readr)
library(plotly)
library(dplyr)
library(reshape2)
filename <- "s1_infiltration.csv"
if(grep('s1',filename)){
scenario <- 'scenario 1 - free-floating'
} else if(grep('s2',filename)){
scenario <- 'scenario 2 - solved with HVAC supply parameter without HVAC details in model'
} else if(grep('s3',filename)){
scenario <- 'scenario 3 - solved with HVAC supply parameter with HVAC details in model'
}
if(grep('infiltration',filename)){
unkonw_parameter <- 'Infiltration Rate (ACH)'
y_lim <- 1.2
} else if(grep('people_count',filename)){
unkonw_parameter <- 'People Count'
y_lim <- 15
}
df <- read.csv(filename)
View(df_melt)
ggplot(mtcars, aes(factor(cyl), mpg)) +
geom_violin(aes(fill = cyl))
mtcars
View(df)
setwd("~/GitHub/SDI/Model_Calibration_2.1/2~Hybrid_Calibration/Hourly_output")
library(readr)
library(plotly)
library(dplyr)
library(reshape2)
filename <- "hourly_conusmption.csv"
df <- read.csv(filename)
View(df)
View(df_melt)
View(df_melt)
ggplot(df_melt, aes(factor(variable), value)) +
geom_violin(aes(fill = variable))
df_e <- df[,c(1, 3, 4)]
View(df_e)
View(df)
df_e <- df[,c(1, 2, 4, 6)]
df_f <- df[,c(1, 3, 5, 7)]
View(df_e)
df_melt_e <- df_e %>% melt
df_melt_f <- df_f %>% melt
ggplot(df_melt_e, aes(factor(variable), value)) +
geom_violin(aes(fill = variable))
ggplot(df_melt_f, aes(factor(variable), value)) +
geom_violin(aes(fill = variable))
ggplot(df_melt_e, aes(factor(variable), value)) +
geom_violin(aes(fill = variable))
ggplot(df_melt_e, aes(factor(variable), value)) +
geom_boxplot(aes(fill = variable))
ggplot(df_melt_e, aes(factor(variable), value)) +
geom_boxplot(aes(fill = variable))
ggplot(df_melt_f, aes(factor(variable), value)) +
geom_boxplot(aes(fill = variable))
ggplot(df_melt_f, aes(factor(variable), value)) +
geom_boxplot(aes(fill = variable)) +
ylim(c(0, 50))
ggplot(df_melt_f, aes(factor(variable), value)) +
geom_boxplot(aes(fill = variable)) +
ylim(c(0, 20))
ggplot(df_melt_f, aes(factor(variable), value)) +
geom_boxplot(aes(fill = variable)) +
ylim(c(0, 10))
setwd("~/GitHub/SDI/Model_Calibration_2.1/2~Hybrid_Calibration/InverseModeling")
source('C:/Users/Han/Dropbox (Energy Technologies)/Projects/Sensor Data Integration/sub-task-2/timestep_visualization.r')
source('C:/Users/Han/Dropbox (Energy Technologies)/Projects/Sensor Data Integration/sub-task-2/timestep_visualization.r')
source('C:/Users/Han/Dropbox (Energy Technologies)/Projects/Sensor Data Integration/sub-task-2/timestep_visualization.r')
filename <- "hourly_conusmption.csv"
filename <- "People_count_with_CO2.csv"
df <- read.csv(filename)
View(df)
setwd("~/GitHub/SDI/Model_Calibration_2.1/2~Hybrid_Calibration/Hourly_output")
library(readr)
library(plotly)
library(dplyr)
library(reshape2)
filename <- "hourly_conusmption.csv"
filename <- "People_count_with_CO2.csv"
df <- read.csv(filename)
View(df)
setwd("C:/Users/Han/Dropbox (Energy Technologies)/Projects/Sensor Data Integration/sub-task-2/Experiments/All/plots")
library(readr)
library(plotly)
library(dplyr)
library(reshape2)
filename <- "s1_infiltration.csv"
if(grep('s1',filename)){
scenario <- 'scenario 1 - free-floating'
} else if(grep('s2',filename)){
scenario <- 'scenario 2 - solved with HVAC supply parameter without HVAC details in model'
} else if(grep('s3',filename)){
scenario <- 'scenario 3 - solved with HVAC supply parameter with HVAC details in model'
}
if(grep('infiltration',filename)){
unkonw_parameter <- 'Infiltration Rate (ACH)'
y_lim <- 1.2
} else if(grep('people_count',filename)){
unkonw_parameter <- 'People Count'
y_lim <- 15
}
df <- read.csv(filename)
df_melt <- df %>% melt
View(df_melt)
df_melt_raw <- df_melt %>% mutate(Trace = case_when((grepl('Temperature', variable) & grepl('Ground_Truth', variable)) ~ 'Ground Truth',
(grepl('Temperature', variable) & grepl('Hybrid_Solution', variable)) ~ 'Solved with Temperature',
(grepl('Humidity', variable) & grepl('Hybrid_Solution', variable)) ~ 'Solved with Humidity',
(grepl('CO2', variable) & grepl('Hybrid_Solution', variable)) ~ 'Solved with CO2'),
Location = case_when(grepl('Chicago', variable) ~ 'Chicago',
grepl('Houston', variable) ~ 'Houston',
grepl('San_Francisco', variable) ~ 'San_Francisco'),
Zone = case_when(grepl('Zone_1', variable) ~ 'Zone_1',
grepl('Zone_2', variable) ~ 'Zone_2',
grepl('Zone_3', variable) ~ 'Zone_3',
grepl('Zone_4', variable) ~ 'Zone_4')) %>%
filter(!is.na(Trace))
View(df_melt_raw)
View(df_melt_raw)
df_melt <- df %>% melt
View(df_melt)
setwd("~/GitHub/SDI/Model_Calibration_2.1/2~Hybrid_Calibration/Hourly_output")
library(readr)
library(plotly)
library(dplyr)
library(reshape2)
filename <- "hourly_conusmption.csv"
filename <- "People_count_with_CO2.csv"
df <- read.csv(filename)
df_melt <- df %>% melt
View(df_melt)
factor(df_melt$variable)
table(df_melt$variable)
df_melt_raw <- df_melt %>% mutate(Trace = case_when((grepl('Ground.Truth', variable)) ~ 'Ground Truth',
(grepl('Inverse.Solution', variable)) ~ 'Inverse Solution',
(grepl('Normal.Simulation', variable)) ~ 'Normal Simulation'),
Zone = case_when(grepl('Back', variable) ~ 'Zone Back',
grepl('LEFT', variable) ~ 'Zone Left',
grepl('RIGHT', variable) ~ 'Zone Right',
grepl('FRONT', variable) ~ 'Zone Front',
grepl('CORE', variable) ~ 'Zone Core')) %>%
filter(!is.na(Trace))
View(df_melt_raw)
df_melt_raw <- df_melt %>% mutate(Trace = case_when((grepl('Ground.Truth', variable)) ~ 'Ground Truth',
(grepl('Inverse.Solution', variable)) ~ 'Inverse Solution',
(grepl('Normal.Simulation', variable)) ~ 'Normal Simulation'),
Zone = case_when(grepl('BACK', variable) ~ 'Zone Back',
grepl('LEFT', variable) ~ 'Zone Left',
grepl('RIGHT', variable) ~ 'Zone Right',
grepl('FRONT', variable) ~ 'Zone Front',
grepl('CORE', variable) ~ 'Zone Core')) %>%
filter(!is.na(Trace))
View(df_melt_raw)
p <- ggplot(df_melt_raw, aes(x = Trace, y = value, fill = Trace)) +
geom_violin(trim= FALSE)
p
p <- ggplot(df_melt_raw, aes(x = Trace, y = value, fill = Trace)) +
geom_violin(trim= FALSE)+
facet_grid(Zone ~ Location) +
ylim(0, y_lim)+
labs(title = paste0("Inverse solution of ", tolower(unkonw_parameter)),
subtitle = scenario)+
ylab(unkonw_parameter) +
theme_bw() +
theme(plot.title=element_text(size=16, face="bold", hjust = 0.5),
plot.subtitle=element_text(size=14, hjust=0.5, face="italic", color="black"))+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p
p <- ggplot(df_melt_raw, aes(x = Trace, y = value, fill = Trace)) +
geom_violin(trim= FALSE)+
facet_grid(Zone) +
ylim(0, y_lim)+
labs(title = paste0("Inverse solution of ", tolower(unkonw_parameter)),
subtitle = scenario)+
ylab(unkonw_parameter) +
theme_bw() +
theme(plot.title=element_text(size=16, face="bold", hjust = 0.5),
plot.subtitle=element_text(size=14, hjust=0.5, face="italic", color="black"))+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p <- ggplot(df_melt_raw, aes(x = Trace, y = value, fill = Trace)) +
geom_violin(trim= FALSE)+
facet_wrap( ~ Zone) +
ylim(0, y_lim)+
labs(title = paste0("Inverse solution of ", tolower(unkonw_parameter)),
subtitle = scenario)+
ylab(unkonw_parameter) +
theme_bw() +
theme(plot.title=element_text(size=16, face="bold", hjust = 0.5),
plot.subtitle=element_text(size=14, hjust=0.5, face="italic", color="black"))+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p
View(df_melt_raw)
p <- ggplot(df_melt_raw, aes(x = Trace, y = value, fill = Trace)) +
geom_violin(trim= FALSE)+
facet_wrap( ~ Zone)
p
p <- ggplot(df_melt_raw, aes(x = Trace, y = value, fill = Trace)) +
geom_violin(trim= FALSE)+
facet_wrap( ~ Zone) +
ylim(0, y_lim)+
labs(title = paste0("Inverse solution of ", tolower(unkonw_parameter)),
subtitle = scenario)+
theme_bw() +
theme(plot.title=element_text(size=16, face="bold", hjust = 0.5),
plot.subtitle=element_text(size=14, hjust=0.5, face="italic", color="black"))+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p
p <- ggplot(df_melt_raw, aes(x = Trace, y = value, fill = Trace)) +
geom_violin(trim= FALSE)+
facet_wrap( ~ Zone) +
labs(title = paste0("Inverse solution of ", tolower(unkonw_parameter)),
subtitle = scenario)+
theme_bw() +
theme(plot.title=element_text(size=16, face="bold", hjust = 0.5),
plot.subtitle=element_text(size=14, hjust=0.5, face="italic", color="black"))+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p
df_melt_raw <- df_melt_raw[whcih(df_melt_raw$Zone != 'Zone Core'),]
df_melt_raw <- df_melt_raw[which(df_melt_raw$Zone != 'Zone Core'),]
p <- ggplot(df_melt_raw, aes(x = Trace, y = value, fill = Trace)) +
geom_violin(trim= FALSE)+
facet_wrap(~ Zone) +
labs(title = paste0("Inverse solution of ", tolower(unkonw_parameter)),
subtitle = scenario)+
theme_bw() +
theme(plot.title=element_text(size=16, face="bold", hjust = 0.5),
plot.subtitle=element_text(size=14, hjust=0.5, face="italic", color="black"))+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p
p <- ggplot(df_melt_raw, aes(x = Trace, y = value, fill = Trace)) +
geom_violin(trim= FALSE)+
facet_wrap(~ Zone) +
labs(title = paste0("Zone People Count"))+
theme_bw() +
theme(plot.title=element_text(size=16, face="bold", hjust = 0.5),
plot.subtitle=element_text(size=14, hjust=0.5, face="italic", color="black"))+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p
p <- ggplot(df_melt_raw, aes(x = Trace, y = value, fill = Trace)) +
geom_violin(trim= FALSE)+
facet_wrap(~ Zone) +
labs(title = paste0("Zone People Count (except core zone)"))+
theme_bw() +
theme(plot.title=element_text(size=16, face="bold", hjust = 0.5),
plot.subtitle=element_text(size=14, hjust=0.5, face="italic", color="black"))+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p
p <- ggplot(df_melt_raw, aes(x = Trace, y = value, fill = Trace)) +
geom_boxplot(trim= FALSE)+
facet_wrap(~ Zone) +
labs(title = paste0("Zone People Count (except core zone)"))+
theme_bw() +
theme(plot.title=element_text(size=16, face="bold", hjust = 0.5),
plot.subtitle=element_text(size=14, hjust=0.5, face="italic", color="black"))+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p <- ggplot(df_melt_raw, aes(x = Trace, y = value, fill = Trace)) +
geom_boxplot(trim= FALSE)+
facet_wrap(~ Zone) +
labs(title = paste0("Zone People Count (except core zone)"))+
theme_bw() +
theme(plot.title=element_text(size=16, face="bold", hjust = 0.5),
plot.subtitle=element_text(size=14, hjust=0.5, face="italic", color="black"))+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p
p <- ggplot(df_melt_raw, aes(x = Trace, y = value, fill = Trace)) +
geom_violin(trim= TRUE)+
facet_wrap(~ Zone) +
labs(title = paste0("Zone People Count (except core zone)"))+
theme_bw() +
theme(plot.title=element_text(size=16, face="bold", hjust = 0.5),
plot.subtitle=element_text(size=14, hjust=0.5, face="italic", color="black"))+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p
setwd("~/GitHub/SDI/Model_Calibration_2.1/2~Hybrid_Calibration/Hourly_output")
source('C:/Users/Han/Dropbox (Energy Technologies)/Projects/Sensor Data Integration/sub-task-2/timestep_visualization.r')
source('C:/Users/Han/Dropbox (Energy Technologies)/Projects/Sensor Data Integration/sub-task-2/timestep_visualization.r')
source('C:/Users/Han/Dropbox (Energy Technologies)/Projects/Sensor Data Integration/sub-task-2/timestep_visualization.r')
source('C:/Users/Han/Dropbox (Energy Technologies)/Projects/Sensor Data Integration/sub-task-2/timestep_visualization.r')
setwd("~/GitHub/EP_HL/EnergyPlus_clone_2/EnergyPlus/Build/Products")
source('C:/Users/Han/Dropbox (Energy Technologies)/Projects/Sensor Data Integration/sub-task-2/timestep_visualization.r')
source('C:/Users/Han/Dropbox (Energy Technologies)/Projects/Sensor Data Integration/sub-task-2/timestep_visualization.r')
setwd("~/GitHub/EP_HL/EnergyPlus_clone/EnergyPlus/Build/Products")
source('C:/Users/Han/Dropbox (Energy Technologies)/Projects/Sensor Data Integration/sub-task-2/timestep_visualization.r')
setwd("~/GitHub/SDI/Model_Calibration_2.1/2~Hybrid_Calibration/Hourly_output")
source('C:/Users/Han/Dropbox (Energy Technologies)/Projects/Sensor Data Integration/sub-task-2/timestep_visualization.r')
source('C:/Users/Han/Dropbox (Energy Technologies)/Projects/Sensor Data Integration/sub-task-2/timestep_visualization.r')
